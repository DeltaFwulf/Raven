import numpy as np



def linearRK4(X0:np.array, h:float, rocket, forces:function) -> np.array:
    """
    Explicit Runge-Kutta-NystrÃ¶m [4] method to solve vehicle linear position and velocity.
    
    A function to calculate the forces on the body given its state vector and the time must also be given. The inputs must always be the same:
        - X, vehicle or body definition, environment definition, switches (i.e. in vacuum, etc.)

    And the function must always output the force vector, f
    """

    def diff(dt:float, X0:np.array, forces:function, mass) -> np.array:
        """Differentiates the current state equation"""

        force = forces(X0, dt)
        dm = 0 # Include this somehow flexibly, this is a constant change in mass over h

        X1 = np.array(np.shape(X0))
        X1[0,:] = X0[1,:]
        X1[1,:] = force / mass

        return X1
    
    k1 = diff(0, X0, forces, rocket.mass)
    k2 = diff(h/2, X0 + (k1 * h / 2), forces, rocket.mass)
    k3 = diff(h/2, X0 + (k2 * h / 2), forces, rocket.mass)
    k4 = diff(h, X0 + k3 * h, forces, rocket.mass - rocket.massFlow * h)

    return X0 + (h/6) * (k1 + 2*(k2 + k3) + k4)